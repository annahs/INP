#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys  
reload(sys)  
sys.setdefaultencoding('utf8')  
import os
import numpy as np    
from operator import itemgetter  
from pprint import pprint


INP_sample_times25 = {
#sample# start end INPat-25
1: ['03/11/2016 16:57', '03/11/2016 18:57', np.nan	   ],
2: ['03/12/2016 19:10', '03/12/2016 21:09', 0.156889874],	
3: ['03/13/2016 16:49', '03/13/2016 18:49', 0.094872405],	
4: ['03/14/2016 14:20', '03/14/2016 16:22', 0.074331362],	
5: ['03/15/2016 14:10', '03/15/2016 16:10', 0.274653072],	
6: ['03/16/2016 14:23', '03/16/2016 16:35', 0.052102251],	
7: ['03/17/2016 15:58', '03/17/2016 17:58', 0.036037524],	
8: ['03/18/2016 14:05', '03/18/2016 16:09', 0.091594636],	
9: ['03/19/2016 17:03', '03/19/2016 18:59', 0.155272997],	
10:['03/20/2016 16:50', '03/20/2016 18:50', 0.069098648],	
11:['03/21/2016 13:47', '03/21/2016 15:47', 0.061585439],	
12:['03/22/2016 13:44', '03/22/2016 15:44', 0.246090569],	
13:['03/23/2016 14:56', '03/23/2016 16:56', 0.160890087],	
14:['03/24/2016 13:53', '03/24/2016 15:53', 0.337605602],	
16:['03/26/2016 16:26', '03/26/2016 18:26', 0.192599774],	
17:['03/27/2016 16:45', '03/27/2016 18:45', 0.518718759],	
18:['03/28/2016 13:55', '03/28/2016 15:56', 0.541414483],	
}

#sample# start end INPat-25
INP_sample_times15 = {
1: ['03/11/2016 16:57', '03/11/2016 18:57', np.nan],
2: ['03/12/2016 19:10', '03/12/2016 21:09', 0.014],	
3: ['03/13/2016 16:49', '03/13/2016 18:49', 0.006667062],	
4: ['03/14/2016 14:20', '03/14/2016 16:22', 0.010930761],	
5: ['03/15/2016 14:10', '03/15/2016 16:10', 0.012197541],	
6: ['03/16/2016 14:23', '03/16/2016 16:35', np.nan],	
7: ['03/17/2016 15:58', '03/17/2016 17:58', 0.005882624],	
8: ['03/18/2016 14:05', '03/18/2016 16:09', 0.028557448],	
9: ['03/19/2016 17:03', '03/19/2016 18:59', np.nan],	
10:['03/20/2016 16:50', '03/20/2016 18:50', 0.006097561],	
11:['03/21/2016 13:47', '03/21/2016 15:47', 0.020095753],	
12:['03/22/2016 13:44', '03/22/2016 15:44', 0.01117377],	
13:['03/23/2016 14:56', '03/23/2016 16:56', 0.005952381],
14:['03/24/2016 13:53', '03/24/2016 15:53', np.nan],	
16:['03/26/2016 16:26', '03/26/2016 18:26', np.nan],	
17:['03/27/2016 16:45', '03/27/2016 18:45', np.nan],	
18:['03/28/2016 13:55', '03/28/2016 15:56', np.nan],	
}


#sample# start end mineral_dust sea_salt

filter_sample_times_MD = {
1: ['03/11/2016 18:20:00',	'03/13/2016 17:07:00',	-0.86759],
3: ['03/13/2016 17:10:00',	'03/14/2016 14:55:00',	-1.20549],
4: ['03/14/2016 19:58:00',	'03/15/2016 19:48:00',	-0.15087],
5: ['03/15/2016 19:53:00',	'03/16/2016 19:22:00',	0.06549	],
6: ['03/16/2016 19:25:00',	'03/17/2016 19:17:00',	-1.34921],
7: ['03/17/2016 19:19:00',	'03/18/2016 18:47:00',	-1.32662],
8: ['03/18/2016 18:51:00',	'03/19/2016 18:40:00',	-1.15033],
9: ['03/19/2016 18:42:00',	'03/20/2016 19:04:00',	-0.40589],
10:['03/20/2016 19:08:00',	'03/21/2016 15:57:00',	-0.29535],
11:['03/21/2016 16:00:00',	'03/22/2016 15:52:00',	1.41125	],
12:['03/22/2016 15:55:00',	'03/23/2016 15:48:00',	1.3024	],
13:['03/23/2016 15:50:00',	'03/24/2016 15:24:00',	0.07962	],
14:['03/24/2016 15:27:00',	'03/25/2016 14:30:00',	0.91105	],
15:['03/25/2016 14:32:00',	'03/26/2016 16:38:00',	0.19342	],
16:['03/26/2016 16:41:00',	'03/27/2016 17:08:00',	-0.03744],
17:['03/27/2016 17:12:00',	'03/28/2016 15:29:00',	1.24458	],
18:['03/28/2016 15:33:00',	'03/29/2016 15:15:00',	1.58098	],
}

filter_sample_times_SS = {
1: ['03/11/2016 18:20:00',	'03/13/2016 17:07:00',-0.58451],
3: ['03/13/2016 17:10:00',	'03/14/2016 14:55:00',-0.61254],
4: ['03/14/2016 19:58:00',	'03/15/2016 19:48:00',0.12087],
5: ['03/15/2016 19:53:00',	'03/16/2016 19:22:00',0.01286],
6: ['03/16/2016 19:25:00',	'03/17/2016 19:17:00',-0.58616],
7: ['03/17/2016 19:19:00',	'03/18/2016 18:47:00',-0.47098],
8: ['03/18/2016 18:51:00',	'03/19/2016 18:40:00',0.73562],
9: ['03/19/2016 18:42:00',	'03/20/2016 19:04:00',0.67151],
10:['03/20/2016 19:08:00',	'03/21/2016 15:57:00',2.61224],
11:['03/21/2016 16:00:00',	'03/22/2016 15:52:00',1.94342],
12:['03/22/2016 15:55:00',	'03/23/2016 15:48:00',0.10711],
13:['03/23/2016 15:50:00',	'03/24/2016 15:24:00',-0.29679],
14:['03/24/2016 15:27:00',	'03/25/2016 14:30:00',-0.5055],
15:['03/25/2016 14:32:00',	'03/26/2016 16:38:00',-0.52203],
16:['03/26/2016 16:41:00',	'03/27/2016 17:08:00',-0.57092],
17:['03/27/2016 17:12:00',	'03/28/2016 15:29:00',-0.87412],
18:['03/28/2016 15:33:00',	'03/29/2016 15:15:00',-1.18008],
}

def getTimesList(sample_type):
	times_list = []

	if sample_type == 'INP25':
		dict_to_use = INP_sample_times25

	if sample_type == 'INP15':
		dict_to_use = INP_sample_times15

	if sample_type == 'SS':
		dict_to_use = filter_sample_times_SS

	if sample_type == 'MD':
		dict_to_use = filter_sample_times_MD

	for key in dict_to_use:
		times_list.append(dict_to_use[key] + [key])

	return times_list


def getHours(sample_type, case, number_samples=2):
	times_list = getTimesList(sample_type)

	if case == 'all':
		return times_list

	if case == 'highest':
		times_list_subset = sorted(times_list,key=itemgetter(2))[-number_samples:]

	if case == 'lowest':
		times_list_subset = sorted(times_list,key=itemgetter(2))[:number_samples]

	return times_list_subset


def getSamples(sample_type,sample_numbers):
	times_list = []

	if sample_type == 'INP25':
		dict_to_use = INP_sample_times25

	if sample_type == 'INP15':
		dict_to_use = INP_sample_times15

	if sample_type == 'SS':
		dict_to_use = filter_sample_times_SS

	if sample_type == 'MD':
		dict_to_use = filter_sample_times_MD

	for key in sample_numbers:
		times_list.append(dict_to_use[key] + [key])

	return times_list

